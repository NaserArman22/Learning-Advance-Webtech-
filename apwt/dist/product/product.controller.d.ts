export declare class ProductController {
    getAll(): any[];
    findOne(id: string): {
        id: string;
    };
    createUser(user: {}): {};
    update(id: string, productUpdate: []): {
        length: 0;
        toString(): string;
        toLocaleString(): string;
        pop(): never;
        push(...items: never[]): number;
        concat(...items: ConcatArray<never>[]): never[];
        concat(...items: ConcatArray<never>[]): never[];
        join(separator?: string): string;
        reverse(): never[];
        shift(): never;
        slice(start?: number, end?: number): never[];
        sort(compareFn?: (a: never, b: never) => number): [];
        splice(start: number, deleteCount?: number): never[];
        splice(start: number, deleteCount: number, ...items: never[]): never[];
        unshift(...items: never[]): number;
        indexOf(searchElement: never, fromIndex?: number): number;
        lastIndexOf(searchElement: never, fromIndex?: number): number;
        every<S extends never>(predicate: (value: never, index: number, array: never[]) => value is S, thisArg?: any): this is S[];
        every(predicate: (value: never, index: number, array: never[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: never, index: number, array: never[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: never, index: number, array: never[]) => void, thisArg?: any): void;
        map<U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any): U[];
        filter<S_1 extends never>(predicate: (value: never, index: number, array: never[]) => value is S_1, thisArg?: any): S_1[];
        filter(predicate: (value: never, index: number, array: never[]) => unknown, thisArg?: any): never[];
        reduce(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never): never;
        reduce(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never, initialValue: never): never;
        reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: never, currentIndex: number, array: never[]) => U_1, initialValue: U_1): U_1;
        reduceRight(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never): never;
        reduceRight(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never, initialValue: never): never;
        reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: never, currentIndex: number, array: never[]) => U_2, initialValue: U_2): U_2;
        find<S_2 extends never>(predicate: (value: never, index: number, obj: never[]) => value is S_2, thisArg?: any): S_2;
        find(predicate: (value: never, index: number, obj: never[]) => unknown, thisArg?: any): never;
        findIndex(predicate: (value: never, index: number, obj: never[]) => unknown, thisArg?: any): number;
        fill(value: never, start?: number, end?: number): [];
        copyWithin(target: number, start: number, end?: number): [];
        entries(): IterableIterator<[number, never]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<never>;
        includes(searchElement: never, fromIndex?: number): boolean;
        flatMap<U_3, This = undefined>(callback: (this: This, value: never, index: number, array: never[]) => U_3 | readonly U_3[], thisArg?: This): U_3[];
        flat<A, D extends number = 1>(this: A, depth?: D): FlatArray<A, D>[];
        [Symbol.iterator](): IterableIterator<never>;
        [Symbol.unscopables]: {
            [x: number]: boolean;
            length?: boolean;
            toString?: boolean;
            toLocaleString?: boolean;
            pop?: boolean;
            push?: boolean;
            concat?: boolean;
            join?: boolean;
            reverse?: boolean;
            shift?: boolean;
            slice?: boolean;
            sort?: boolean;
            splice?: boolean;
            unshift?: boolean;
            indexOf?: boolean;
            lastIndexOf?: boolean;
            every?: boolean;
            some?: boolean;
            forEach?: boolean;
            map?: boolean;
            filter?: boolean;
            reduce?: boolean;
            reduceRight?: boolean;
            find?: boolean;
            findIndex?: boolean;
            fill?: boolean;
            copyWithin?: boolean;
            entries?: boolean;
            keys?: boolean;
            values?: boolean;
            includes?: boolean;
            flatMap?: boolean;
            flat?: boolean;
            [Symbol.iterator]?: boolean;
            readonly [Symbol.unscopables]?: boolean;
            at?: boolean;
        };
        at(index: number): never;
        id: string;
    };
}
